// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MoyasarSdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import DeveloperToolsSupport
import Foundation
@_exported import MoyasarSdk
import PassKit
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ApiPaymentSource {
  case creditCard(MoyasarSdk.ApiCreditCardSource)
  case applePay(MoyasarSdk.ApiApplePaySource)
  case stcPay(MoyasarSdk.ApiStcPaySource)
}
extension MoyasarSdk.ApiPaymentSource : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ApiToken : Swift.Codable {
  public var id: Swift.String
  public var status: Swift.String
  public var brand: Swift.String
  public var funding: Swift.String
  public var country: Swift.String
  public var month: Swift.String
  public var year: Swift.String
  public var name: Swift.String
  public var lastFour: Swift.String
  public var metadata: [Swift.String : Swift.String]?
  public var message: Swift.String?
  public var verificationUrl: Swift.String?
  public var createdAt: Swift.String
  public var updatedAt: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApiPayment : Swift.Codable {
  public var id: Swift.String
  public var status: Swift.String
  public var amount: Swift.Int
  public var amountFormat: Swift.String
  public var fee: Swift.Int
  public var feeFormat: Swift.String?
  public var currency: Swift.String
  public var refunded: Swift.Int
  public var refundedAt: Swift.String?
  public var refundedFormat: Swift.String?
  public var captured: Swift.Int
  public var capturedAt: Swift.String?
  public var capturedFormat: Swift.String?
  public var voidedAt: Swift.String?
  public var description: Swift.String?
  public var invoiceId: Swift.String?
  public var ip: Swift.String?
  public var callbackUrl: Swift.String?
  public var createdAt: Swift.String
  public var updatedAt: Swift.String
  public var metadata: [Swift.String : Swift.String]?
  public var source: MoyasarSdk.ApiPaymentSource
  public func isInitiated() -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApiError : Swift.Codable {
  public var message: Swift.String?
  public var type: Swift.String?
  public var errors: MoyasarSdk.ApiErrorDetail
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ApiErrorDetail {
  case single(Swift.String?)
  case multi(MoyasarSdk.ApiMutliError)
}
extension MoyasarSdk.ApiErrorDetail : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public typealias ApiMutliError = [Swift.String : [Swift.String]?]?
final public class PaymentService {
  public init()
  final public func create(_ paymentRequest: MoyasarSdk.ApiPaymentRequest, handler: @escaping MoyasarSdk.ApiResultHandler<MoyasarSdk.ApiPayment>) throws
  final public func createToken(_ tokenRequest: MoyasarSdk.ApiTokenRequest, handler: @escaping MoyasarSdk.ApiResultHandler<MoyasarSdk.ApiToken>) throws
  @objc deinit
}
public enum MoyasarError : Swift.Error {
  case apiKeyNotSet
  case invalidApiKey(Swift.String)
  case networkError(any Swift.Error)
  case authorizationError(Swift.String)
  case apiError(MoyasarSdk.ApiError)
  case unexpectedError(Swift.String)
}
public struct PaymentRequest {
  public init(amount: Swift.Int, currency: Swift.String = "SAR", description: Swift.String, metadata: [Swift.String : Swift.String] = [:], manual: Swift.Bool = false, saveCard: Swift.Bool = false, createSaveOnlyToken: Swift.Bool = false)
  public var amount: Swift.Int
  public var currency: Swift.String
  public var description: Swift.String
  public var metadata: [Swift.String : Swift.String]
  public var manual: Swift.Bool
  public var saveCard: Swift.Bool
  public var createSaveOnlyToken: Swift.Bool
}
final public class ApplePayService {
  public init()
  final public func authorizePayment(request: MoyasarSdk.PaymentRequest, token: PassKit.PKPaymentToken, handler: @escaping MoyasarSdk.ApiResultHandler<MoyasarSdk.ApiPayment>) throws
  @objc deinit
}
public struct ApiApplePaySource : Swift.Codable {
  public init(type: Swift.String = "applepay", token: Swift.String? = nil, company: Swift.String? = nil, name: Swift.String? = nil, number: Swift.String? = nil, message: Swift.String? = nil, manual: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MoyasarSdk.ApiApplePaySource {
  public static func fromPKToken(_ token: PassKit.PKPaymentToken) -> MoyasarSdk.ApiApplePaySource
}
public struct ApplePayToken : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApplePayPaymentMethod : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApplePayPaymentPass : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PaymentResult {
  case completed(MoyasarSdk.ApiPayment)
  case saveOnlyToken(MoyasarSdk.ApiToken)
  case failed(any Swift.Error)
  case canceled
}
public class CreditCardViewModel : Foundation.ObservableObject {
  public init(paymentRequest: MoyasarSdk.PaymentRequest, resultCallback: @escaping MoyasarSdk.ResultCallback)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor(unsafe) public struct CreditCardView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(request: MoyasarSdk.PaymentRequest, callback: @escaping MoyasarSdk.ResultCallback)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10MoyasarSdk14CreditCardViewV4bodyQrvp", 0) __
}
public typealias ResultCallback = (MoyasarSdk.PaymentResult) -> ()
public struct ApiCreditCardSource : Swift.Codable {
  public init(type: Swift.String = "creditcard", name: Swift.String, number: Swift.String, month: Swift.String? = nil, year: Swift.String? = nil, cvc: Swift.String? = nil, transactionUrl: Swift.String? = nil, message: Swift.String? = nil, token: Swift.String? = nil, manual: Swift.String? = nil, saveCard: Swift.String? = nil)
  public var type: Swift.String
  public var name: Swift.String
  public var number: Swift.String
  public var month: Swift.String?
  public var year: Swift.String?
  public var cvc: Swift.String?
  public var transactionUrl: Swift.String?
  public var message: Swift.String?
  public var token: Swift.String?
  public var manual: Swift.String?
  public var saveCard: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApiPaymentRequest : Swift.Codable {
  public init(amount: Swift.Int, currency: Swift.String, description: Swift.String, callbackUrl: Swift.String? = nil, source: MoyasarSdk.ApiPaymentSource, metadata: [Swift.String : Swift.String]? = nil)
  public var amount: Swift.Int
  public var currency: Swift.String
  public var description: Swift.String
  public var callbackUrl: Swift.String?
  public var source: MoyasarSdk.ApiPaymentSource
  public var metadata: [Swift.String : Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Moyasar {
  public static var baseUrl: Swift.String
  public static func setApiKey(_ key: Swift.String) throws
}
public enum ApiResult<T> {
  case success(T)
  case error(any Swift.Error)
}
public typealias ApiResultHandler<T> = (MoyasarSdk.ApiResult<T>) -> ()
public struct ApiStcPaySource : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApiTokenRequest : Swift.Codable {
  public init(name: Swift.String, number: Swift.String, cvc: Swift.String?, month: Swift.String?, year: Swift.String?, saveOnly: Swift.Bool = false, callbackUrl: Swift.String?, metadata: [Swift.String : Swift.String]? = [:])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
